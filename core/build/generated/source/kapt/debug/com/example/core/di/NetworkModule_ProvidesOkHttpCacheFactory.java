// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesOkHttpCacheFactory implements Factory<Cache> {
  private final NetworkModule module;

  private final Provider<Context> contextProvider;

  public NetworkModule_ProvidesOkHttpCacheFactory(NetworkModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public Cache get() {
    return providesOkHttpCache(module, contextProvider.get());
  }

  public static NetworkModule_ProvidesOkHttpCacheFactory create(NetworkModule module,
      Provider<Context> contextProvider) {
    return new NetworkModule_ProvidesOkHttpCacheFactory(module, contextProvider);
  }

  public static Cache providesOkHttpCache(NetworkModule instance, Context context) {
    return Preconditions.checkNotNull(instance.providesOkHttpCache(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
