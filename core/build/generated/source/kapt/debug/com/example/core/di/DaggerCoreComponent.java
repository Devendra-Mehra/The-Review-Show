// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import android.content.Context;
import com.squareup.picasso.Picasso;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCoreComponent implements CoreComponent {
  private Provider<Context> providesContextProvider;

  private Provider<Picasso> providesPicassoProvider;

  private Provider<GsonConverterFactory> providesGsonConverterFactoryProvider;

  private Provider<RxJava2CallAdapterFactory> providesRxJavaCallAdapterFactoryProvider;

  private Provider<OkHttpClient> providesOkHttpClientProvider;

  private Provider<Retrofit> providesRetrofitProvider;

  private DaggerCoreComponent(CoreModule coreModuleParam, NetworkModule networkModuleParam,
      GsonModule gsonModuleParam, ImageModule imageModuleParam) {

    initialize(coreModuleParam, networkModuleParam, gsonModuleParam, imageModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final CoreModule coreModuleParam, final NetworkModule networkModuleParam,
      final GsonModule gsonModuleParam, final ImageModule imageModuleParam) {
    this.providesContextProvider = DoubleCheck.provider(CoreModule_ProvidesContextFactory.create(coreModuleParam));
    this.providesPicassoProvider = DoubleCheck.provider(ImageModule_ProvidesPicassoFactory.create(imageModuleParam, providesContextProvider));
    this.providesGsonConverterFactoryProvider = DoubleCheck.provider(GsonModule_ProvidesGsonConverterFactoryFactory.create(gsonModuleParam));
    this.providesRxJavaCallAdapterFactoryProvider = DoubleCheck.provider(NetworkModule_ProvidesRxJavaCallAdapterFactoryFactory.create(networkModuleParam));
    this.providesOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvidesOkHttpClientFactory.create(networkModuleParam));
    this.providesRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvidesRetrofitFactory.create(networkModuleParam, providesGsonConverterFactoryProvider, providesRxJavaCallAdapterFactoryProvider, providesOkHttpClientProvider));
  }

  @Override
  public Picasso picasso() {
    return providesPicassoProvider.get();}

  @Override
  public Retrofit retrofit() {
    return providesRetrofitProvider.get();}

  public static final class Builder {
    private CoreModule coreModule;

    private NetworkModule networkModule;

    private GsonModule gsonModule;

    private ImageModule imageModule;

    private Builder() {
    }

    public Builder coreModule(CoreModule coreModule) {
      this.coreModule = Preconditions.checkNotNull(coreModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder gsonModule(GsonModule gsonModule) {
      this.gsonModule = Preconditions.checkNotNull(gsonModule);
      return this;
    }

    public Builder imageModule(ImageModule imageModule) {
      this.imageModule = Preconditions.checkNotNull(imageModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder storageModule(StorageModule storageModule) {
      Preconditions.checkNotNull(storageModule);
      return this;
    }

    public CoreComponent build() {
      Preconditions.checkBuilderRequirement(coreModule, CoreModule.class);
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (gsonModule == null) {
        this.gsonModule = new GsonModule();
      }
      if (imageModule == null) {
        this.imageModule = new ImageModule();
      }
      return new DaggerCoreComponent(coreModule, networkModule, gsonModule, imageModule);
    }
  }
}
