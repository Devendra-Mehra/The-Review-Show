// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesLoggingInterceptorFactory implements Factory<HttpLoggingInterceptor> {
  private final NetworkModule module;

  public NetworkModule_ProvidesLoggingInterceptorFactory(NetworkModule module) {
    this.module = module;
  }

  @Override
  public HttpLoggingInterceptor get() {
    return providesLoggingInterceptor(module);
  }

  public static NetworkModule_ProvidesLoggingInterceptorFactory create(NetworkModule module) {
    return new NetworkModule_ProvidesLoggingInterceptorFactory(module);
  }

  public static HttpLoggingInterceptor providesLoggingInterceptor(NetworkModule instance) {
    return Preconditions.checkNotNull(instance.providesLoggingInterceptor(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
