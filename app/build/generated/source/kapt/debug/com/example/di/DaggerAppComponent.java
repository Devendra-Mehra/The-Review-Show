// Generated by Dagger (https://dagger.dev).
package com.example.di;

import android.app.Application;
import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.example.core.di.CoreComponent;
import com.example.thereviewshow.application.TheReviewShowApplication;
import com.example.thereviewshow.di.ViewModelFactory;
import com.example.thereviewshow.di.ViewModelFactory_Factory;
import com.example.thereviewshow.trending.ui.TrendingActivity;
import com.example.thereviewshow.trending.ui.TrendingActivity_MembersInjector;
import com.example.thereviewshow.trending.viewmodle.TrendingViewModel;
import com.example.thereviewshow.trending.viewmodle.TrendingViewModel_Factory;
import com.example.thereviewshow.util.StringHelper;
import com.example.thereviewshow.util.StringHelper_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBindingModule_HomeTrendingActivity.TrendingActivitySubcomponent.Factory> trendingActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<StringHelper> stringHelperProvider;

  private Provider<TrendingViewModel> trendingViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, CoreComponent coreComponent,
      Application applicationParam) {

    initialize(appModuleParam, coreComponent, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(TrendingActivity.class, (Provider) trendingActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final CoreComponent coreComponent,
      final Application applicationParam) {
    this.trendingActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_HomeTrendingActivity.TrendingActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_HomeTrendingActivity.TrendingActivitySubcomponent.Factory get() {
        return new TrendingActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider);
    this.stringHelperProvider = StringHelper_Factory.create(provideContextProvider);
    this.trendingViewModelProvider = TrendingViewModel_Factory.create(stringHelperProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(TrendingViewModel.class, (Provider) trendingViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(TheReviewShowApplication arg0) {
    injectTheReviewShowApplication(arg0);}

  private TheReviewShowApplication injectTheReviewShowApplication(
      TheReviewShowApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    private CoreComponent coreComponent;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder coreComponent(CoreComponent coreComponent) {
      this.coreComponent = Preconditions.checkNotNull(coreComponent);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      Preconditions.checkBuilderRequirement(coreComponent, CoreComponent.class);
      return new DaggerAppComponent(new AppModule(), coreComponent, application);
    }
  }

  private final class TrendingActivitySubcomponentFactory implements ActivityBindingModule_HomeTrendingActivity.TrendingActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_HomeTrendingActivity.TrendingActivitySubcomponent create(
        TrendingActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new TrendingActivitySubcomponentImpl(arg0);
    }
  }

  private final class TrendingActivitySubcomponentImpl implements ActivityBindingModule_HomeTrendingActivity.TrendingActivitySubcomponent {
    private TrendingActivitySubcomponentImpl(TrendingActivity arg0) {

    }

    @Override
    public void inject(TrendingActivity arg0) {
      injectTrendingActivity(arg0);}

    private TrendingActivity injectTrendingActivity(TrendingActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      TrendingActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
