// Generated by Dagger (https://dagger.dev).
package com.example.thereviewshow.trending.di;

import com.example.thereviewshow.trending.model.TrendingClient;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TrendingModule_ProvideContextFactory implements Factory<TrendingClient> {
  private final TrendingModule module;

  private final Provider<Retrofit> retrofitProvider;

  public TrendingModule_ProvideContextFactory(TrendingModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public TrendingClient get() {
    return provideContext(module, retrofitProvider.get());
  }

  public static TrendingModule_ProvideContextFactory create(TrendingModule module,
      Provider<Retrofit> retrofitProvider) {
    return new TrendingModule_ProvideContextFactory(module, retrofitProvider);
  }

  public static TrendingClient provideContext(TrendingModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(instance.provideContext(retrofit), "Cannot return null from a non-@Nullable @Provides method");
  }
}
